{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftMotor = motor(PORT1, ratio18_1, false);\n\nmotor RightMotor = motor(PORT2, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\ngps GPS3 = gps(PORT3, 0.00, 0.00, mm, 180);\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {selma_huzejrovic}                                        */\n/*    Created:      {05/01/23}                                                */\n/*    Description:  competition prototype                                     */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n//Controller code, left arcade\nLeftMotor.setVelocity((Controller1.Axis3.position() + Controller1.Axis4.position()), percent);\nRightMotor.setVelocity((Controller1.Axis3.position() - Controller1.Axis4.position()), percent);\n\n//GPS sensor, calibrate\nGPS3.calibrate();\n\n//Calculate and print the efficiency of the GPS sensor\nBrain.Screen.print(\"GPS Signal Quality: %d\", GPS3.quality());\nBrain.Screen.newLine();\n/* \n----------------------------------------------------------\n100 means it is working perfectly \n90 means the field strip isn't being used\n80 to 0 means it is not efficient and is not accurate enough \n----------------------------------------------------------\n*/\n\n//Calculate and print the heading of the GPS sensor \nBrain.Screen.print(\"GPS Heading: %d\", GPS3.heading());\nBrain.Screen.newLine();\n//Remove the comment if the GPS sensor is not in the middle of the robot\n\n/*\n----------------------------------------------------------\nsetOrigin is x, y, (units)\nThis allows the robot to travel correctly if there is an offset of the GPS sensor \nSet the origin to whatever the offset of the GPS sensor is from the middle of the bot\n----------------------------------------------------------\n*/\n\n//GPS3.setOrigin(0, 0, in);\n\n\n// Calculate how much the GPS sensor has rotated\n\n/*\n----------------------------------------------------------\nThis part of the code calculates how much the GPS sensor has rotated\nIt is calculated along the X, Y, and Z axis\nBrain screen prints however much the sensor has detected the bot has rotated so far\n----------------------------------------------------------\n*/\n\n  Brain.Screen.print(\"GPS Gyro Rate - X Axis: %f\", GPS3.gyroRate(xaxis, dps));\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"GPS Gyro Rate - Y Axis: %f\", GPS3.gyroRate(yaxis, dps));\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"GPS Gyro Rate - Z Axis: %f\", GPS3.gyroRate(zaxis, dps));\n  Brain.Screen.newLine();\n  wait(0.1, seconds);\n\n/*\n----------------------------------------------------------\nPrints how much the robot has accelerated\nAcceleration printing is across the X, Y, and Z axis\n----------------------------------------------------------\n*/\n\nBrain.Screen.print(\"Acceleration on X: %f\", GPS3.acceleration(xaxis));\nBrain.Screen.newLine();\nBrain.Screen.print(\"Acceleration on Y: %f\", GPS3.acceleration(yaxis));\nBrain.Screen.newLine();\nBrain.Screen.print(\"Acceleration on Z: %f\", GPS3.acceleration(zaxis));\nBrain.Screen.newLine();\n\n}","textLanguage":"cpp","rconfig":[{"port":[1],"name":"LeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"RightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[3],"name":"GPS3","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.6","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}