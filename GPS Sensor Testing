#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
motor LeftMotor = motor(PORT1, ratio18_1, false);

motor RightMotor = motor(PORT2, ratio18_1, false);

controller Controller1 = controller(primary);
gps GPS3 = gps(PORT3, 0.00, 0.00, mm, 180);



// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;

#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {selma_huzejrovic}                                        */
/*    Created:      {05/01/23}                                                */
/*    Description:  gps sensor testing                                        */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

/*
----------------------------------------------------------
The comments are here to explain the code
Look for these paragraphs to see the different parts of the code
----------------------------------------------------------
*/ 

int main() {
//Controller code, left arcade
LeftMotor.setVelocity((Controller1.Axis3.position() + Controller1.Axis4.position()), percent);
RightMotor.setVelocity((Controller1.Axis3.position() - Controller1.Axis4.position()), percent);

//GPS sensor, calibrate
GPS3.calibrate();

//Calculate and print the efficiency of the GPS sensor
Brain.Screen.print("GPS Signal Quality: %d", GPS3.quality());
Brain.Screen.newLine();
/* 
----------------------------------------------------------
100 means it is working perfectly 
90 means the field strip isn't being used
80 to 0 means it is not efficient and is not accurate enough 
----------------------------------------------------------
*/

//Calculate and print the heading of the GPS sensor 
Brain.Screen.print("GPS Heading: %d", GPS3.heading());
Brain.Screen.newLine();
//Remove the comment if the GPS sensor is not in the middle of the robot

/*
----------------------------------------------------------
setOrigin is x, y, (units)
This allows the robot to travel correctly if there is an offset of the GPS sensor 
Set the origin to whatever the offset of the GPS sensor is from the middle of the bot
----------------------------------------------------------
*/

//GPS3.setOrigin(0, 0, in);


// Calculate how much the GPS sensor has rotated

/*
----------------------------------------------------------
This part of the code calculates how much the GPS sensor has rotated
It is calculated along the X, Y, and Z axis
Brain screen prints however much the sensor has detected the bot has rotated so far
----------------------------------------------------------
*/

  Brain.Screen.print("GPS Gyro Rate - X Axis: %f", GPS3.gyroRate(xaxis, dps));
  Brain.Screen.newLine();
  Brain.Screen.print("GPS Gyro Rate - Y Axis: %f", GPS3.gyroRate(yaxis, dps));
  Brain.Screen.newLine();
  Brain.Screen.print("GPS Gyro Rate - Z Axis: %f", GPS3.gyroRate(zaxis, dps));
  Brain.Screen.newLine();
  wait(0.1, seconds);

/*
----------------------------------------------------------
Prints how much the robot has accelerated
Acceleration printing is across the X, Y, and Z axis
----------------------------------------------------------
*/

Brain.Screen.print("Acceleration on X: %f", GPS3.acceleration(xaxis));
Brain.Screen.newLine();
Brain.Screen.print("Acceleration on Y: %f", GPS3.acceleration(yaxis));
Brain.Screen.newLine();
Brain.Screen.print("Acceleration on Z: %f", GPS3.acceleration(zaxis));
Brain.Screen.newLine();

/*
----------------------------------------------------------
THIS IS THE BEGINNING OF THE DRIVING CODE
REMOVE THE COMMENTS FROM THE CODE WHEN YOU ARE READY TO DRIVE
MAKE SURE ALL OBSTACLES ARE OUT OF THE WAY BEFORE STARTING TESTING
----------------------------------------------------------
*/
/*
----------------------------------------------------------
Drives the robot to the origin, 0, 0
This should be the middle of the field
If it is not the middle of the field, make sure your offset is correctly coded
----------------------------------------------------------
*/
/*
  driveToPositionX(0);
  driveToPositionY(0);
*/
}
